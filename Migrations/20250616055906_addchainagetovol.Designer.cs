// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace geo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250616055906_addchainagetovol")]
    partial class addchainagetovol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirQualityData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<int>("AQI")
                        .HasColumnType("integer");

                    b.Property<double>("CO")
                        .HasColumnType("double precision");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NO2")
                        .HasColumnType("double precision");

                    b.Property<double>("O3")
                        .HasColumnType("double precision");

                    b.Property<double>("PM10")
                        .HasColumnType("double precision");

                    b.Property<double>("PM2_5")
                        .HasColumnType("double precision");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorId");

                    b.ToTable("AirQualityData");
                });

            modelBuilder.Entity("ElectricMeterData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ConsumptionKWh")
                        .HasColumnType("double precision");

                    b.Property<string>("HouseArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseholdId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeterStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorId");

                    b.ToTable("ElectricMeterData");
                });

            modelBuilder.Entity("EnvironmentData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<double>("HumidityPercent")
                        .HasColumnType("double precision");

                    b.Property<double>("NoiseLevelDb")
                        .HasColumnType("double precision");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TemperatureCelsius")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("UvIndex")
                        .HasColumnType("double precision");

                    b.HasKey("SensorId");

                    b.ToTable("EnvironmentData");
                });

            modelBuilder.Entity("ResidentCountData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfHouseholds")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfResidents")
                        .HasColumnType("integer");

                    b.Property<string>("ResidentialBlock")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorId");

                    b.ToTable("ResidentCountData");
                });

            modelBuilder.Entity("TrafficData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<int>("AccidentsReported")
                        .HasColumnType("integer");

                    b.Property<double>("AverageSpeedKmph")
                        .HasColumnType("double precision");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SignalViolations")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrafficCongestionLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleCount")
                        .HasColumnType("integer");

                    b.HasKey("SensorId");

                    b.ToTable("TrafficData");
                });

            modelBuilder.Entity("WaterQualityData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<double>("DissolvedOxygenMgPerL")
                        .HasColumnType("double precision");

                    b.Property<double>("PhLevel")
                        .HasColumnType("double precision");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TurbidityNTU")
                        .HasColumnType("double precision");

                    b.HasKey("SensorId");

                    b.ToTable("WaterQualityData");
                });

            modelBuilder.Entity("YourNamespace.Models.VisualizationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AnotationId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Chainage_from")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Chainage_to")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ConstructionStageMasterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("VisualizationData");
                });

            modelBuilder.Entity("AirQualityData", b =>
                {
                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<string>("AirQualityDataSensorId")
                                .HasColumnType("text");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("AirQualityDataSensorId");

                            b1.ToTable("AirQualityData");

                            b1.WithOwner()
                                .HasForeignKey("AirQualityDataSensorId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("ElectricMeterData", b =>
                {
                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<string>("ElectricMeterDataSensorId")
                                .HasColumnType("text");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("ElectricMeterDataSensorId");

                            b1.ToTable("ElectricMeterData");

                            b1.WithOwner()
                                .HasForeignKey("ElectricMeterDataSensorId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("EnvironmentData", b =>
                {
                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<string>("EnvironmentDataSensorId")
                                .HasColumnType("text");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("EnvironmentDataSensorId");

                            b1.ToTable("EnvironmentData");

                            b1.WithOwner()
                                .HasForeignKey("EnvironmentDataSensorId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("ResidentCountData", b =>
                {
                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<string>("ResidentCountDataSensorId")
                                .HasColumnType("text");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("ResidentCountDataSensorId");

                            b1.ToTable("ResidentCountData");

                            b1.WithOwner()
                                .HasForeignKey("ResidentCountDataSensorId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("TrafficData", b =>
                {
                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<string>("TrafficDataSensorId")
                                .HasColumnType("text");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("TrafficDataSensorId");

                            b1.ToTable("TrafficData");

                            b1.WithOwner()
                                .HasForeignKey("TrafficDataSensorId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("WaterQualityData", b =>
                {
                    b.OwnsOne("Contaminants", "ContaminantsPpm", b1 =>
                        {
                            b1.Property<string>("WaterQualityDataSensorId")
                                .HasColumnType("text");

                            b1.Property<double>("Arsenic")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lead")
                                .HasColumnType("double precision");

                            b1.HasKey("WaterQualityDataSensorId");

                            b1.ToTable("WaterQualityData");

                            b1.WithOwner()
                                .HasForeignKey("WaterQualityDataSensorId");
                        });

                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<string>("WaterQualityDataSensorId")
                                .HasColumnType("text");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("WaterQualityDataSensorId");

                            b1.ToTable("WaterQualityData");

                            b1.WithOwner()
                                .HasForeignKey("WaterQualityDataSensorId");
                        });

                    b.Navigation("ContaminantsPpm")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("YourNamespace.Models.VisualizationData", b =>
                {
                    b.OwnsOne("VolumeDetails", "Volume", b1 =>
                        {
                            b1.Property<int>("VisualizationDataId")
                                .HasColumnType("integer");

                            b1.Property<double>("Cut")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fill")
                                .HasColumnType("double precision");

                            b1.Property<double>("Net")
                                .HasColumnType("double precision");

                            b1.Property<double>("Total")
                                .HasColumnType("double precision");

                            b1.HasKey("VisualizationDataId");

                            b1.ToTable("VisualizationData");

                            b1.WithOwner()
                                .HasForeignKey("VisualizationDataId");
                        });

                    b.Navigation("Volume")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
