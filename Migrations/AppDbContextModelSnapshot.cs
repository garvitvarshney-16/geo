// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace geo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirQualityData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<int>("AQI")
                        .HasColumnType("integer");

                    b.Property<double>("CO")
                        .HasColumnType("double precision");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NO2")
                        .HasColumnType("double precision");

                    b.Property<double>("O3")
                        .HasColumnType("double precision");

                    b.Property<double>("PM10")
                        .HasColumnType("double precision");

                    b.Property<double>("PM2_5")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorId");

                    b.ToTable("AirQualityData");
                });

            modelBuilder.Entity("ElectricMeterData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ConsumptionKWh")
                        .HasColumnType("double precision");

                    b.Property<string>("HouseArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseholdId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeterStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorId");

                    b.ToTable("ElectricMeterData");
                });

            modelBuilder.Entity("EnvironmentData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<double>("HumidityPercent")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NoiseLevelDb")
                        .HasColumnType("double precision");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TemperatureCelsius")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("UvIndex")
                        .HasColumnType("double precision");

                    b.HasKey("SensorId");

                    b.ToTable("EnvironmentData");
                });

            modelBuilder.Entity("ResidentCountData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfHouseholds")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfResidents")
                        .HasColumnType("integer");

                    b.Property<string>("ResidentialBlock")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorId");

                    b.ToTable("ResidentCountData");
                });

            modelBuilder.Entity("TrafficData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<int>("AccidentsReported")
                        .HasColumnType("integer");

                    b.Property<double>("AverageSpeedKmph")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SignalViolations")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrafficCongestionLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleCount")
                        .HasColumnType("integer");

                    b.HasKey("SensorId");

                    b.ToTable("TrafficData");
                });

            modelBuilder.Entity("WaterQualityData", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("text");

                    b.Property<string>("ContaminantsPpm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DissolvedOxygenMgPerL")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PhLevel")
                        .HasColumnType("double precision");

                    b.Property<string>("Sensor_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TurbidityNTU")
                        .HasColumnType("double precision");

                    b.HasKey("SensorId");

                    b.ToTable("WaterQualityData");
                });
#pragma warning restore 612, 618
        }
    }
}
